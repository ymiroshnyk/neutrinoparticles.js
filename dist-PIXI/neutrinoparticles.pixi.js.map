{"version":3,"sources":["../src/PIXI/PIXINeutrinoContext.js","../src/PIXI/PIXINeutrinoEffect.js","../src/PIXI/PIXINeutrinoEffectModel.js","../src/PIXI/PIXINeutrinoMaterials.js","../src/PIXI/PIXINeutrinoRenderBuffers.js"],"names":["PIXINeutrinoContext","renderer","gl","neutrino","NeutrinoParticles","effectsBasePath","texturesBasePath","trimmedExtensionLookupFirst","PIXI","CanvasRenderer","materials","PIXINeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","PIXINeutrinoEffect","effectModel","position","rotation","scale","baseParent","ctx","effect","set","positionZ","x","y","scaleZ","ready","_onEffectReady","once","_updateWorldTransform","dt","update","_scaledPosition","axisangle2quat_","worldRotationDegree","sx","worldScale","sy","m","worldTransform","context","setTransform","a","b","c","d","tx","ty","draw","setObjectRenderer","emptyRenderer","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","texture","textures","bindTexture","premultiplied","baseTexture","premultipliedAlpha","materialIndex","switchToNormal","switchToAdd","switchToMultiply","numIndices","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","worldPosition","localPosition","Point","localXAxis","localYAxis","worldXAxis","worldYAxis","toLocal","toGlobal","Math","sqrt","_calcWorldRotation","PI","obj","parent","createCanvas2DInstance","textureDescs","textureImageDescs","PIXINeutrinoRenderBuffers","createWGLInstance","texturesRemap","emit","Container","PIXINeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","numTextures","length","imageIndex","texturePath","trimmedTexturePath","replace","utils","TextureCache","Texture","fromImage","hasLoaded","_onTextureLoaded","self","index","image","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","SubRect","DisplayObject","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shader","Shader","shaderMultiply","currentShader","attributes","aVertexPosition","aColor","aTextureCoord","worldMatrixArray","worldMatrix","_setShader","state","setBlendMode","correctBlendMode","bindShader","uniforms","uSampler","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","bindVao","positionBuffer","glCore","GLBuffer","createVertexBuffer","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","createIndexBuffer","STATIC_DRAW","vao","createVao","addIndex","addAttribute","positionAttrib","FLOAT","colorAttrib","UNSIGNED_BYTE","texAttrib","vertex","color","rc","Object","assign","upload","Int32Array","forEach","size","start","TRIANGLES","destroy"],"mappings":"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","file":"neutrinoparticles.pixi.js","sourcesContent":["class PIXINeutrinoContext {\n\n\tconstructor(renderer) {\n\t\tvar gl = renderer.gl;\n\t\t\n\t\tthis.renderer = renderer;\n\t\tthis.neutrino = new NeutrinoParticles();\n\t\tthis.effectsBasePath = \"\";\n\t\tthis.texturesBasePath = \"\";\n\t\tthis.trimmedExtensionLookupFirst = true;\n\n\t\tif (!(renderer instanceof PIXI.CanvasRenderer)) {\n\t\t\tthis.materials = new PIXINeutrinoMaterials(this);\n\t\t}\n\t}\n\n\tinitializeNoise(path, success, fail) {\n\t\tthis.neutrino.initializeNoise(path, success, fail);\n\t}\n\n\tloadEffect(path, success, fail) {\n\t\tthis.neutrino.loadEffect(path, success, fail);\n\t}\n}\n","class PIXINeutrinoEffect extends PIXI.Container {\n\n\tconstructor(effectModel, position, rotation, scale, baseParent) {\n\t\tsuper();\n\n\t\tthis.ctx = effectModel.ctx;\n\t\tthis.effectModel = effectModel;\n\t\tthis.effect = null;\n\t\tthis.baseParent = baseParent;\n\t\t\n\t\tif (position)\n\t\t{\n\t\t\tthis.position.set(position[0], position[1]);\n\t\t\tthis.positionZ = position[2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.position.set(0, 0);\n\t\t\tthis.positionZ = 0;\n\t\t}\n\n\t\tif (rotation)\n\t\t\tthis.rotation = rotation;\n\n\t\tif (scale) {\n\t\t\tthis.scale.x = scale[0];\n\t\t\tthis.scale.y = scale[1];\n\t\t\tthis.scaleZ = scale[2];\n\t\t}\n\t\telse\n\t\t\tthis.scaleZ = 1;\n\n\t\tif (effectModel.ready()) {\n\t\t\tthis._onEffectReady();\n\t\t} else {\n\t\t\teffectModel.once('ready', function () {\n\t\t\t\tthis._onEffectReady();\n\t\t\t}, this);\n\t\t}\n\n\t\tthis._updateWorldTransform();\n\t}\n\n\tready() {\n\t\treturn this.effect != null;\n\t}\n\n\tupdate(dt) {\n\t\tthis._updateWorldTransform();\n\t\t\n\t\tif (this.effect != null) {\n\t\t\tthis.effect.update(dt, this._scaledPosition(),\n\t\t\t\tthis.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree));\n\t\t}\n\t}\n\n\trenderCanvas(renderer) {\n\t\tif (!this.ready())\n\t\t\treturn;\n\n\t\tif (this.baseParent)\n\t\t{\n\t\t\tvar sx = this.worldScale.x;\n\t\t\tvar sy = this.worldScale.y;\n\t\t\tvar m = this.baseParent.worldTransform;\n\t\t\trenderer.context.setTransform(m.a * sx, m.b * sy, m.c * sx, m.d * sy, m.tx * sx, \n\t\t\t\tm.ty * sy);\n\t\t} else {\n\t\t\trenderer.context.setTransform(this.worldScale.x, 0, 0, this.worldScale.y, 0, 0);\n\t\t}\n\t\t\n\t\tthis.effect.draw(renderer.context);\n\t};\n\n\trenderWebGL(renderer) {\n\t\tif (!this.ready())\n\t\t\treturn;\n\n\t\trenderer.setObjectRenderer(renderer.emptyRenderer);\n\n\t\tif (this.baseParent)\n\t\t{\n\t\t\tvar sx = this.worldScale.x;\n\t\t\tvar sy = this.worldScale.y;\n\t\t\tvar m = this.baseParent.worldTransform;\n\t\t\tthis.ctx.materials.setup([m.a * sx, m.b * sy, 0, m.c * sx, m.d * sy, 0,\n\t\t\t\tm.tx * sx, m.ty * sy, 1]);\n\t\t} else {\n\t\t\tthis.ctx.materials.setup([this.worldScale.x, 0, 0, 0, this.worldScale.y, 0, 0, 0, 1]);\n\t\t}\n\n\t\tthis.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\n\n\t\tthis.renderBuffers.updateGlBuffers();\n\t\tthis.renderBuffers.bind();\n\n\t\tfor (var renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\n\t\t\tvar renderCall = this.renderBuffers.renderCalls[renderCallIdx];\n\t\t\tvar texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\n\n\t\t\tlet texture = this.effectModel.textures[texIndex];\n\t\t\trenderer.bindTexture(texture, 0, true);\n\n\t\t\tlet premultiplied = texture.baseTexture.premultipliedAlpha;\n\t\t\tvar materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\n\t\t\tswitch (this.effect.model.materials[materialIndex]) {\n\t\t\t\tdefault: this.ctx.materials.switchToNormal(premultiplied); break;\n\t\t\t\tcase 1: this.ctx.materials.switchToAdd(premultiplied); break;\n\t\t\t\tcase 2: this.ctx.materials.switchToMultiply(premultiplied); break;\n\t\t\t}\n\n\t\t\tthis.renderBuffers.draw(renderCall.numIndices, renderCall.startIndex);\n\t\t}\n\t}\n\n\trestart(position, rotation) {\n\t\tif (position) {\n\t\t\tthis.position.x = position[0];\n\t\t\tthis.position.y = position[1];\n\t\t\tthis.positionZ = position[2];\n\t\t}\n\n\t\tif (rotation) {\n\t\t\tthis.rotation = rotation;\n\t\t}\n\n\t\tthis._updateWorldTransform();\n\n\t\tthis.effect.restart(this._scaledPosition(),\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree) \n\t\t\t: null);\n\t}\n\n\tresetPosition(position, rotation) {\n\t\tif (position) {\n\t\t\tthis.position.x = position[0];\n\t\t\tthis.position.y = position[1];\n\t\t\tthis.positionZ = position[2];\n\t\t}\n\n\t\tif (rotation) {\n\t\t\tthis.rotation = rotation;\n\t\t}\n\n\t\tthis._updateWorldTransform();\n\n\t\tthis.effect.resetPosition(this._scaledPosition(),\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree) : null);\n\t}\n\n\tsetPropertyInAllEmitters(name, value) {\n\t\tthis.effect.setPropertyInAllEmitters(name, value);\n\t}\n\n\tgetNumParticles() {\n\t\treturn this.effect.getNumParticles();\n\t}\n\n\t_scaledPosition() {\n\t\treturn [this.worldPosition.x / this.worldScale.x, this.worldPosition.y / \n\t\t\tthis.worldScale.y, this.positionZ / this.scaleZ];\n\t}\n\n\t_updateWorldTransform() {\n\t\tvar localPosition = new PIXI.Point(0, 0);\n\t\tvar localXAxis = new PIXI.Point(1, 0);\n\t\tvar localYAxis = new PIXI.Point(0, 1);\n\n\t\tvar worldXAxis, worldYAxis;\n\n\t\tif (this.baseParent)\n\t\t{\n\t\t\tthis.worldPosition = this.baseParent.toLocal(localPosition, this);\n\t\t\tworldXAxis = this.baseParent.toLocal(localXAxis, this);\n\t\t\tworldYAxis = this.baseParent.toLocal(localYAxis, this);\n\t\t} else {\n\t\t\tthis.worldPosition = this.toGlobal(localPosition);\n\t\t\tworldXAxis = this.toGlobal(localXAxis);\n\t\t\tworldYAxis = this.toGlobal(localYAxis);\n\t\t}\n\n\t\tworldXAxis.x -= this.worldPosition.x;\n\t\tworldXAxis.y -= this.worldPosition.y;\n\t\tworldYAxis.x -= this.worldPosition.x;\n\t\tworldYAxis.y -= this.worldPosition.y;\n\n\t\tthis.worldScale = {\n\t\t\tx: Math.sqrt(worldXAxis.x * worldXAxis.x + worldXAxis.y * worldXAxis.y),\n\t\t\ty: Math.sqrt(worldYAxis.x * worldYAxis.x + worldYAxis.y * worldYAxis.y),\n\t\t};\n\n\t\tthis.worldRotationDegree = (this._calcWorldRotation(this) / Math.PI * 180) % 360;\n\t}\n\n\t_calcWorldRotation(obj) {\n\t\tif (obj.parent && obj.parent != this.baseParent)\n\t\t\treturn obj.rotation + this._calcWorldRotation(obj.parent);\n\t\telse\n\t\t\treturn obj.rotation;\n\t}\n\n\t_onEffectReady() {\n\t\tthis._updateWorldTransform();\n\n\t\tvar position = this._scaledPosition();\n\t\tvar rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree);\n\n\t\tif (this.effectModel.ctx.renderer instanceof PIXI.CanvasRenderer) {\n\t\t\tthis.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\n\t\t\tthis.effect.textureDescs = this.effectModel.textureImageDescs;\n\t\t} else {\n\t\t\tthis.renderBuffers = new PIXINeutrinoRenderBuffers(this.ctx);\n\t\t\tthis.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\n\t\t\tthis.effect.texturesRemap = this.effectModel.texturesRemap;\n\t\t}\n\n\t\tthis.emit('ready', this);\n\t}\n}\n","class PIXINeutrinoEffectModel extends PIXI.DisplayObject {\n\n\tconstructor(context, effectPath) {\n\t\tsuper();\n\n\t\tthis.ctx = context;\n\t\tthis.effectPath = effectPath;\n\t\tthis.effectModel = null;\n\t\tthis.numTexturesToLoadLeft = -1;\n\t\tthis.texturesRemap = null;\n\n\t\tvar pixiNeutrinoEffect = this;\n\t\tthis.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\n\t\t\tpixiNeutrinoEffect._onEffectLoaded(effectModel);\n\t\t});\n\t}\n\n\tready() {\n\t\treturn this.numTexturesToLoadLeft === 0;\n\t}\n\n\t_onEffectLoaded(effectModel) {\n\t\tthis.effectModel = effectModel;\n\t\tthis.textures = [];\n\t\tthis.textureImageDescs = [];\n\t\tvar numTextures = effectModel.textures.length;\n\t\tthis.numTexturesToLoadLeft = numTextures;\n\n\t\tfor (var imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\n\t\t\tvar texturePath = effectModel.textures[imageIndex];\n\t\t\tvar texture = null;\n\t\t\t\n\t\t\tif (this.ctx.trimmedExtensionLookupFirst) {\n\t\t\t\tvar trimmedTexturePath = texturePath.replace(/\\.[^/.]+$/, \"\"); // https://stackoverflow.com/a/4250408\n\t\t\t\ttexture = PIXI.utils.TextureCache[trimmedTexturePath];\n\t\t\t}\n\n\t\t\tif (!texture)\n\t\t\t\ttexture = PIXI.utils.TextureCache[texturePath];\n\n\t\t\tif (!texture)\n\t\t\t\ttexture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\n\n\t\t\tif (texture.baseTexture.hasLoaded) {\n\t\t\t\tthis._onTextureLoaded(imageIndex, texture);\n\t\t\t} else {\n\t\t\t\ttexture.once('update', function (self, imageIndex, texture) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tself._onTextureLoaded(imageIndex, texture);\n\t\t\t\t\t}\n\t\t\t\t} (this, imageIndex, texture));\n\t\t\t}\n\n\t\t}\n\t}\n\n\t_onTextureLoaded(index, texture) {\n\t\tthis.textures[index] = texture;\n\n\t\tthis.numTexturesToLoadLeft--;\n\n\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\n\t\t\tvar image = texture.baseTexture.source;\n\t\t\tthis.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\n\t\t\t\ttexture.orig.width, texture.orig.height);\n\t\t} else {\n\t\t}\n\n\t\tif (this.numTexturesToLoadLeft === 0) {\n\n\t\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\n\n\t\t\t} else {\n\t\t\t\tthis._initTexturesRemapIfNeeded();\n\t\t\t}\n\n\t\t\tthis.emit('ready', this);\n\t\t}\n\t}\n\n\t_initTexturesRemapIfNeeded() {\n\t\tvar remapNeeded = false;\n\n\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n\t\t\tvar texture = this.textures[texIdx];\n\n\t\t\tif (texture.orig.x != 0 || texture.orig.y != 0\n\t\t\t\t|| texture.orig.width != texture.baseTexture.realWidth\n\t\t\t\t|| texture.orig.height != texture.baseTexture.realHeight) {\n\t\t\t\tremapNeeded = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.texturesRemap = [];\n\t\tif (remapNeeded) {\n\t\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n\t\t\t\tvar texture = this.textures[texIdx];\n\n\t\t\t\tthis.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\n\t\t\t\t\ttexture.orig.x / texture.baseTexture.realWidth,\n\t\t\t\t\t1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\n\t\t\t\t\ttexture.orig.width / texture.baseTexture.realWidth,\n\t\t\t\t\ttexture.orig.height / texture.baseTexture.realHeight\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n","class PIXINeutrinoMaterials {\n\n\tconstructor(ctx) {\n        this.ctx = ctx;\n\t\tthis.renderer = ctx.renderer;\n\t\tvar gl = this.renderer.gl;\n\n\t\tvar vertexShaderSource = \"\\\n/* NeutrinoParticles Vertex Shader */ \\n\\\nattribute vec3 aVertexPosition;\\n\\\nattribute vec4 aColor; \\n\\\nattribute vec2 aTextureCoord;\\n\\\n\\n\\\nuniform mat3 projectionMatrix;\\n\\\nuniform mat3 worldMatrix;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nvoid main(void) {\\n\\\n\tgl_Position = vec4((projectionMatrix * worldMatrix * vec3(aVertexPosition.xy, 1)).xy, 0, 1);\\n\\\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\n}\";\n\n\t\tvar fragmentShaderSource = \"\\\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void) {\\n\\\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\n}\";\n\n\t\tvar fragmentShaderMultiplySource = \"\\\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n\tvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\n\tvec3 rgb = vColor.rgb * texel.rgb;\\n\\\n\tfloat alpha = vColor.a * texel.a;\\n\\\n\tgl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\n}\";\n\n\t\tthis.shader = new PIXI.Shader(gl, vertexShaderSource, fragmentShaderSource);\n\t\tthis.shaderMultiply = new PIXI.Shader(gl, vertexShaderSource, fragmentShaderSource);\n\t\tthis.currentShader = null;\n\t}\n\n\tshutdown() {\n\t}\n\n\tpositionAttrib() {\n\t\treturn this.shader.attributes.aVertexPosition;\n\t}\n\n\tcolorAttrib() {\n\t\treturn this.shader.attributes.aColor;\n\t}\n\n\ttexAttrib(index) {\n\t\treturn this.shader.attributes.aTextureCoord;\n\t}\n\n\tsetup(worldMatrixArray) {\n\t\tthis.worldMatrix = worldMatrixArray;\n\t\tthis.currentShader = null;\n\t}\n\n\tswitchToNormal(premultiplied) {\n\t\tthis._setShader(this.shader);\n\t\tthis.renderer.state.setBlendMode(PIXI.utils.correctBlendMode(0, premultiplied));\n\t}\n\n\tswitchToAdd(premultiplied) {\n\t\tthis._setShader(this.shader);\n\t\tthis.renderer.state.setBlendMode(PIXI.utils.correctBlendMode(1, premultiplied));\n\t}\n\n\tswitchToMultiply(premultiplied) {\n\t\tthis._setShader(this.shaderMultiply);\n\t\tthis.renderer.state.setBlendMode(PIXI.utils.correctBlendMode(2, premultiplied));\n\t}\n\n\t_setShader(shader) {\n\t\tif (this.currentShader != shader)\n\t\t{\n\t\t\tthis.renderer.bindShader(shader);\n\t\t\tshader.uniforms.uSampler = 0;\n\t\t\tshader.uniforms.worldMatrix = this.worldMatrix;\n\n\t\t\tthis.currentShader = shader;\n\t\t}\n\t}\n}\n","class PIXINeutrinoRenderBuffers {\n\tconstructor(context, geometryBuffers) {\n\t\tthis.ctx = context;\n\t\tthis.gl = this.ctx.renderer.gl;\n\n\t\tthis.positions = null;\n\t\tthis.colors = null;\n\t\tthis.texCoords = [];\n\t\tthis.maxNumVertices = 0;\n\t\tthis.numVertices = 0;\n\t\tthis.indices = null;\n\n\t\tthis.renderCalls = [];\n\t\tthis.maxNumRenderCalls = 0;\n\t\tthis.numRenderCalls = 0;\n\t}\n\n\tinitialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\n\t\tvar gl = this.gl;\n\n\t\tthis.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\n\t\tthis.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\n\t\tthis.texCoords = [];\n\t\tfor (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\n\t\t\tthis.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\n\t\t\tthis.texCoords[texChannel].numComponents = texChannels[texChannel];\n\t\t}\n\t\tthis.maxNumVertices = maxNumVertices;\n\n\t\tthis.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\n\t\tthis.indices.set(indices, 0);\n\n\t\tthis.maxNumRenderCalls = maxNumRenderCalls;\n\n        // set null vao to prevent overriding of it's buffers to next ones\n\t\tthis.ctx.renderer.bindVao(null);\n\n\t\tthis.positionBuffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\n\t\t\t this.positions, gl.DYNAMIC_DRAW);\n\n\t\tthis.colorBuffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\n\t\t\tthis.colors, gl.DYNAMIC_DRAW);\n\n\t\tthis.texBuffers = [];\n\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n\t\t\tvar buffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\n\t\t\t\tthis.texCoords[texIndex], gl.DYNAMIC_DRAW);\n\t\t\tthis.texBuffers.push(buffer);\n\t\t}\n\n\t\tthis.indicesBuffer = PIXI.glCore.GLBuffer.createIndexBuffer(gl,\n\t\t\tthis.indices, gl.STATIC_DRAW);\n\n\t\tvar materials = this.ctx.materials;\n\n\t\tthis.vao = this.ctx.renderer.createVao().addIndex(this.indicesBuffer).\n\t\t\taddAttribute(this.positionBuffer, materials.positionAttrib(), gl.FLOAT, false, 0, 0).\n\t\t\taddAttribute(this.colorBuffer, materials.colorAttrib(), gl.UNSIGNED_BYTE, true, 0, 0);\n\n\t\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n\t\t\t\tthis.vao.addAttribute(this.texBuffers[texIndex], materials.texAttrib(texIndex),\n\t\t\t\t\tgl.FLOAT, false, 0, 0);\n\t\t\t}\n\t}\n\n\tpushVertex(vertex) {\n\t\tthis.positions.set(vertex.position, this.numVertices * 3);\n\t\tthis.colors.set(vertex.color, this.numVertices * 4);\n\n\t\tfor (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\n\t\t\tthis.texCoords[texIndex].set(vertex.texCoords[texIndex],\n\t\t\t\tthis.numVertices * this.texCoords[texIndex].numComponents);\n\t\t}\n\n\t\t++this.numVertices;\n\t}\n\n\tpushRenderCall(rc) {\n\n\t\tif (this.numRenderCalls >= this.renderCalls.length)\n\t\t\tthis.renderCalls.push(Object.assign({}, rc));\n\t\telse\n\t\t\tObject.assign(this.renderCalls[this.numRenderCalls], rc);\n\n\t\t++this.numRenderCalls;\n\t}\n\n\tcleanup() {\n\t\tthis.numVertices = 0;\n\t\tthis.numRenderCalls = 0;\n\t}\n\n\tupdateGlBuffers() {\n\t\tvar gl = this.gl;\n\n\t\tif (this.numVertices > 0)\n\t\t{\n\t\t\tthis.positionBuffer.upload(new Float32Array(this.positions.buffer, 0, this.numVertices * 3), 0);\n\t\t\t\tthis.colorBuffer.upload(new Int32Array(this.colors.buffer, 0, this.numVertices), 0);\n\n\t\t\t\tthis.texBuffers.forEach(function (buffer, index) {\n\t\t\t\t\tbuffer.upload(new Float32Array(this.texCoords[index].buffer, 0, this.numVertices * this.texCoords[index].numComponents), 0);\n\t\t\t\t}, this);\n\t\t}\n\t}\n\n\tbind() {\n\t\tthis.ctx.renderer.bindVao(this.vao);\n\t}\n\n\tdraw(size, start) {\n\t\tvar gl = this.gl;\n\t\t\n\t\tthis.vao.draw(gl.TRIANGLES, size, start);\n\t}\n\n\tshutdown() {\n\t\tthis.positionBuffer.destroy();\n\t\tthis.colorBuffer.destroy();\n\n\t\tthis.texBuffers.forEach(function (buffer) {\n\t\t\tbuffer.destroy();\n\t\t}, this);\n\t}\n}\n"]}