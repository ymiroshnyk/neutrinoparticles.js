{"version":3,"sources":["../src/PIXI5/PIXINeutrino.js","../src/PIXI5/PIXINeutrinoAplicationPlugin.js","../src/PIXI5/PIXINeutrinoContext.js","../src/PIXI5/PIXINeutrinoEffect.js","../src/PIXI5/PIXINeutrinoEffectModel.js","../src/PIXI5/PIXINeutrinoLoaderPlugin.js","../src/PIXI5/PIXINeutrinoRenderBuffers.js","../src/PIXI5/PIXINeutrinoRendererPlugin.js"],"names":["PIXINeutrino","PIXI","Application","registerPlugin","PIXINeutrinoApplicationPlugin","Renderer","PIXINeutrinoRendererPlugin","Loader","PIXINeutrinoLoaderPlugin","options","neutrino","PIXINeutrinoContext","application","Object","assign","texturesBasePath","trimmedExtensionsLookupFirst","NeutrinoParticles","canvasRenderer","CanvasRenderer","renderer","_noiseInitialized","_noiseGenerator","path","success","fail","initializeNoise","noiseGenerator","NoiseGenerator","step","done","progress","result","_progress","metadata","PIXINeutrinoEffect","effectModel","position","rotation","scale","baseParent","ctx","effect","_renderElements","set","positionZ","x","y","scaleZ","ready","_onEffectReady","once","_updateWorldTransform","dt","update","_scaledPosition","axisangle2quat_","worldRotationDegree","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","_updateRenderElements","batch","setObjectRenderer","plugins","i","length","render","sx","worldScale","sy","m","worldTransform","context","setTransform","a","b","c","d","tx","ty","draw","worldPosition","localPosition","Point","localXAxis","localYAxis","worldXAxis","worldYAxis","toLocal","toGlobal","Math","sqrt","_calcWorldRotation","PI","obj","parent","rb","renderBuffers","fillGeometryBuffers","numRenderCalls","rc","renderCalls","element","textureIndex","model","renderStyles","renderStyleIndex","textureIndices","_texture","textures","startVertexIndex8","startVertexIndex","numVertices2","numVertices","vertexData","Float32Array","positions","buffer","colors","Uint32Array","uvs","texCoords","indices","Uint16Array","startIndex","numIndices","materialIndex","materials","blendMode","BLEND_MODES","NORMAL","ADD","MULTIPLY","createCanvas2DInstance","textureDescs","textureImageDescs","PIXINeutrinoRenderBuffers","createWGLInstance","texturesRemap","emit","Container","PIXINeutrinoEffectModel","loader","resource","evalScript","data","eval","numTextures","_numTexturesToLoadLeft","imageIndex","texturePath","texture","trimmedTexturePath","replace","utils","TextureCache","baseTexture","valid","_onTextureLoaded","self","add","parentResource","index","image","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","SubRect","EventEmitter","next","extension","maxNumVertices","globalIndices","maxNumRenderCalls","texChannels","ArrayBuffer","Uint8Array","vertex","startIndex2","wt","color","push","thisRenderCall","endIndex","endVertexIndex","shaderGenerator","BatchShaderGenerator","BatchPluginFactory","defaultVertexSrc","defaultFragmentTemplate","geometryClass","BatchGeometry","vertexSize","attributeBuffer","indexBuffer","aIndex","iIndex","uint32View","float32View","packedVertices","indicies","textureId","_id","lastSrcColor","lastResultColor","prepareColor","premultiplyAlpha","srcColor","shiftedAlpha","alpha","premultiplyTint","AbstractBatchRenderer"],"mappings":"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","file":"neutrinoparticles.pixi5.js","sourcesContent":["class PIXINeutrino\r\n{\r\n    static registerPlugins()\r\n    {\r\n        PIXI.Application.registerPlugin(PIXINeutrinoApplicationPlugin)\r\n        PIXI.Renderer.registerPlugin('neutrino', PIXINeutrinoRendererPlugin);\r\n        PIXI.Loader.registerPlugin(PIXINeutrinoLoaderPlugin);\r\n    }\r\n}\r\n","class PIXINeutrinoApplicationPlugin\r\n{\r\n    static init(options)\r\n    {\r\n        this.neutrino = new PIXINeutrinoContext(this, options.neutrino || {});\r\n    }\r\n\r\n    static destroy()\r\n    {\r\n        this.neutrino = null;\r\n    }\r\n}","class PIXINeutrinoContext\r\n{\r\n    constructor(application, options)\r\n    {\r\n        this.options = Object.assign({\r\n            texturesBasePath: \"\",\r\n            trimmedExtensionsLookupFirst: true\r\n        }, options);\r\n\r\n        this.neutrino = new NeutrinoParticles();\r\n\r\n        this.canvasRenderer = PIXI.CanvasRenderer ? \r\n            (application.renderer instanceof PIXI.CanvasRenderer) : false;\r\n        this._noiseInitialized = false;\r\n        this._noiseGenerator = null;\r\n    }\r\n\r\n    initializeNoise(path, success, fail) \r\n    {\r\n        if (this._noiseInitialized)\r\n        {\r\n            if (success) success();\r\n            return;\r\n        }\r\n\r\n        this.neutrino.initializeNoise(path, \r\n            function() \r\n            { \r\n                this._noiseInitialized = true; \r\n                if (success) success(); \r\n            }, \r\n            fail);\r\n    }\r\n    \r\n    generateNoise()\r\n    {\r\n        if (this._noiseInitialized)\r\n            return;\r\n\r\n        let noiseGenerator = new this.neutrino.NoiseGenerator();\r\n        while (!noiseGenerator.step()) { // approx. 5,000 steps\r\n            // you can use 'noiseGenerator.progress' to get generating progress from 0.0 to 1.0\r\n        }\r\n\r\n        this._noiseInitialized = true;\r\n    }\r\n    \r\n    generateNoiseStep()\r\n    {\r\n        if (this._noiseInitialized)\r\n        {\r\n            return { done: true, progress: 1.0 };\r\n        }\r\n\r\n        if (!this._noiseGenerator)\r\n            this._noiseGenerator = new this.neutrino.NoiseGenerator();\r\n\r\n        const result = this._noiseGenerator.step();\r\n        const _progress = this._noiseGenerator.progress;\r\n\r\n        if (result)\r\n        {\r\n            this._noiseInitialized = true;\r\n            this._noiseGenerator = null;\r\n        }\r\n\r\n        return { done: result, progress: _progress };\r\n    }\r\n\r\n    get loadOptions()\r\n    {\r\n        return { metadata: { neutrino: this } };\r\n    }\r\n}","class PIXINeutrinoEffect extends PIXI.Container\r\n{\r\n    constructor(effectModel, position, rotation, scale, baseParent)\r\n    {\r\n        super();\r\n\r\n\t\tthis.ctx = effectModel.ctx;\r\n\t\tthis.effectModel = effectModel;\r\n\t\tthis.effect = null;\r\n\t\tthis.baseParent = baseParent;\r\n\t\tthis._renderElements = [];\r\n\t\t\r\n\t\tif (position)\r\n\t\t{\r\n\t\t\tthis.position.set(position[0], position[1]);\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.position.set(0, 0);\r\n\t\t\tthis.positionZ = 0;\r\n\t\t}\r\n\r\n\t\tif (rotation)\r\n\t\t\tthis.rotation = rotation;\r\n\r\n\t\tif (scale) \r\n\t\t{\r\n\t\t\tthis.scale.x = scale[0];\r\n\t\t\tthis.scale.y = scale[1];\r\n\t\t\tthis.scaleZ = scale[2];\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.scaleZ = 1;\r\n\r\n\t\tif (effectModel.ready()) \r\n\t\t{\r\n\t\t\tthis._onEffectReady();\r\n\t\t} else \r\n\t\t{\r\n\t\t\teffectModel.once('ready', function () \r\n\t\t\t{\r\n\t\t\t\tthis._onEffectReady();\r\n\t\t\t}, this);\r\n\r\n\t\t\tthis._updateWorldTransform();\r\n\t\t}\r\n    }\r\n\r\n\tready() \r\n\t{\r\n\t\treturn this.effect != null;\r\n\t}\r\n\r\n\tupdate(dt) \r\n\t{\r\n\t\tthis._updateWorldTransform();\r\n\t\t\r\n\t\tif (this.effect == null)\r\n\t\t\treturn;\r\n\r\n\t\tthis.effect.update(dt, this._scaledPosition(),\r\n\t\t\tthis.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree));\r\n\t}\r\n\r\n\trestart(position, rotation) \r\n\t{\r\n\t\tif (position) \r\n\t\t{\r\n\t\t\tthis.position.x = position[0];\r\n\t\t\tthis.position.y = position[1];\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\r\n\t\tif (rotation) \r\n\t\t{\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tthis._updateWorldTransform();\r\n\r\n\t\tif (this.effect == null)\r\n\t\t\treturn;\r\n\r\n\t\tthis.effect.restart(this._scaledPosition(),\r\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree) \r\n\t\t\t: null);\r\n\t}\r\n\r\n\tresetPosition(position, rotation) \r\n\t{\r\n\t\tif (position) \r\n\t\t{\r\n\t\t\tthis.position.x = position[0];\r\n\t\t\tthis.position.y = position[1];\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\r\n\t\tif (rotation) \r\n\t\t{\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tthis._updateWorldTransform();\r\n\r\n\t\tif (this.effect == null)\r\n\t\t\treturn;\r\n\r\n\t\tthis.effect.resetPosition(this._scaledPosition(),\r\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree) : null);\r\n\t}\r\n\r\n\tsetPropertyInAllEmitters(name, value) \r\n\t{\r\n\t\tthis.effect.setPropertyInAllEmitters(name, value);\r\n\t}\r\n\r\n\tgetNumParticles() \r\n\t{\r\n\t\treturn this.effect.getNumParticles();\r\n\t}\r\n\r\n\t_render(renderer)\r\n    {\r\n        if (!this.ready())\r\n\t\t\treturn;\r\n\t\t\t\r\n\t\tthis._updateRenderElements();\r\n            \r\n\t\trenderer.batch.setObjectRenderer(renderer.plugins.neutrino);\r\n\r\n\t\tfor (let i = 0; i < this._renderElements.length; ++i)\r\n\t\t{\r\n\t\t\trenderer.plugins.neutrino.render(this._renderElements[i]);\r\n\t\t}\r\n    }\r\n\r\n\t_renderCanvas(renderer)\r\n\t{\r\n\t\tif (!this.ready())\r\n\t\t\treturn;\r\n\r\n\t\tif (this.baseParent)\r\n\t\t{\r\n\t\t\tlet sx = this.worldScale.x;\r\n\t\t\tlet sy = this.worldScale.y;\r\n\t\t\tlet m = this.baseParent.worldTransform;\r\n\t\t\trenderer.context.setTransform(m.a * sx, m.b * sy, m.c * sx, m.d * sy, m.tx * sx, m.ty * sy);\r\n\t\t} \r\n\t\telse \r\n\t\t{\r\n\t\t\trenderer.context.setTransform(this.worldScale.x, 0, 0, this.worldScale.y, 0, 0);\r\n\t\t}\r\n\t\t\r\n\t\tthis.effect.draw(renderer.context);\r\n\t}\r\n\r\n\t_scaledPosition() \r\n\t{\r\n\t\treturn [this.worldPosition.x / this.worldScale.x, this.worldPosition.y / \r\n\t\t\tthis.worldScale.y, this.positionZ / this.scaleZ];\r\n\t}\r\n\r\n\t_updateWorldTransform() \r\n\t{\r\n\t\tconst localPosition = new PIXI.Point(0, 0);\r\n\t\tconst localXAxis = new PIXI.Point(1, 0);\r\n\t\tconst localYAxis = new PIXI.Point(0, 1);\r\n\r\n\t\tvar worldXAxis, worldYAxis;\r\n\r\n\t\tif (this.baseParent)\r\n\t\t{\r\n\t\t\tthis.worldPosition = this.baseParent.toLocal(localPosition, this);\r\n\t\t\tworldXAxis = this.baseParent.toLocal(localXAxis, this);\r\n\t\t\tworldYAxis = this.baseParent.toLocal(localYAxis, this);\r\n\t\t} else \r\n\t\t{\r\n\t\t\tthis.worldPosition = this.toGlobal(localPosition);\r\n\t\t\tworldXAxis = this.toGlobal(localXAxis);\r\n\t\t\tworldYAxis = this.toGlobal(localYAxis);\r\n\t\t}\r\n\r\n\t\tworldXAxis.x -= this.worldPosition.x;\r\n\t\tworldXAxis.y -= this.worldPosition.y;\r\n\t\tworldYAxis.x -= this.worldPosition.x;\r\n\t\tworldYAxis.y -= this.worldPosition.y;\r\n\r\n\t\tthis.worldScale = {\r\n\t\t\tx: Math.sqrt(worldXAxis.x * worldXAxis.x + worldXAxis.y * worldXAxis.y),\r\n\t\t\ty: Math.sqrt(worldYAxis.x * worldYAxis.x + worldYAxis.y * worldYAxis.y),\r\n\t\t};\r\n\r\n\t\tthis.worldRotationDegree = (this._calcWorldRotation(this) / Math.PI * 180) % 360;\r\n\t}\r\n\r\n\t_calcWorldRotation(obj) \r\n\t{\r\n\t\tif (obj.parent && obj.parent != this.baseParent)\r\n\t\t\treturn obj.rotation + this._calcWorldRotation(obj.parent);\r\n\t\telse\r\n\t\t\treturn obj.rotation;\r\n\t}\r\n\r\n\t_updateRenderElements()\r\n\t{\r\n\t\tconst rb = this.renderBuffers;\r\n\r\n\t\tif (this.baseParent)\r\n\t\t{\r\n\t\t\tconst sx = this.worldScale.x;\r\n\t\t\tconst sy = this.worldScale.y;\r\n\t\t\tconst m = this.baseParent.worldTransform;\r\n\t\t\trb.worldTransform = [m.a * sx, m.b * sy, m.c * sx, m.d * sy, m.tx * sx, m.ty * sy];\r\n\t\t} else {\r\n\t\t\trb.worldTransform = [this.worldScale.x, 0, 0, this.worldScale.y, 0, 0];\r\n\t\t}\r\n\r\n\t\tthis.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\r\n\t\t\r\n\t\tthis._renderElements.length = rb.numRenderCalls;\r\n\r\n\t\tfor (let i = 0; i < rb.numRenderCalls; ++i)\r\n\t\t{\r\n\t\t\tconst rc = rb.renderCalls[i];\r\n\t\t\tconst element = {};\r\n\r\n\t\t\tconst textureIndex = this.effect.model.renderStyles[\r\n\t\t\t\trc.renderStyleIndex].textureIndices[0];\r\n\r\n\t\t\telement._texture = \tthis.effectModel.textures[textureIndex];\r\n\r\n\t\t\tconst startVertexIndex8 = rc.startVertexIndex * 8;\r\n\t\t\tconst numVertices2 = rc.numVertices * 2;\r\n\r\n\t\t\telement.vertexData = new Float32Array(rb.positions.buffer,\r\n\t\t\t\tstartVertexIndex8, numVertices2);\r\n\t\t\telement.colors = new Uint32Array(rb.colors.buffer,\r\n\t\t\t\trc.startVertexIndex * 4, rc.numVertices)\r\n\t\t\telement.uvs = new Float32Array(rb.texCoords.buffer,\r\n\t\t\t\tstartVertexIndex8, numVertices2);\r\n\t\t\telement.indices = new Uint16Array(rb.indices.buffer,\r\n\t\t\t\trc.startIndex * 2, rc.numIndices);\r\n\r\n\t\t\tconst materialIndex = this.effect.model.renderStyles[rc.renderStyleIndex].materialIndex;\r\n\t\t\tswitch (this.effect.model.materials[materialIndex]) \r\n\t\t\t{\r\n\t\t\t\tdefault: element.blendMode = PIXI.BLEND_MODES.NORMAL; break;\r\n\t\t\t\tcase 1: element.blendMode = PIXI.BLEND_MODES.ADD; break;\r\n\t\t\t\tcase 2: element.blendMode = PIXI.BLEND_MODES.MULTIPLY; break;\r\n\t\t\t}\r\n\r\n\t\t\t//element.worldAlpha = 1;\r\n\r\n\t\t\tthis._renderElements[i] = element;\r\n\t\t}\r\n\t}\r\n\r\n\t_onEffectReady() \r\n\t{\r\n\t\tthis._updateWorldTransform();\r\n\r\n\t\tvar position = this._scaledPosition();\r\n\t\tvar rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree);\r\n\r\n\t\tif (this.effectModel.ctx.canvasRenderer)\r\n\t\t{\r\n\t\t\tthis.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\r\n\t\t\tthis.effect.textureDescs = this.effectModel.textureImageDescs;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.renderBuffers = new PIXINeutrinoRenderBuffers();\r\n\t\t\tthis.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\r\n\t\t\tthis.effect.texturesRemap = this.effectModel.texturesRemap;\r\n\t\t\tthis._updateRenderElements();\r\n\t\t}\r\n\r\n\t\tthis.emit('ready', this);\r\n\t}\r\n}\r\n","class PIXINeutrinoEffectModel extends PIXI.utils.EventEmitter \r\n{\r\n\r\n\tconstructor(context, loader, resource) \r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.ctx = context;\r\n\r\n\t\tlet evalScript = \"(function(ctx) {\\n\" + resource.data + \r\n                \"\\nreturn new NeutrinoEffect(ctx);\\n})(context.neutrino);\";\r\n\t\tthis.effectModel = eval(evalScript);\r\n\r\n\t\tthis.texturesRemap = null;\r\n\t\tthis.textures = [];\r\n\t\tthis.textureImageDescs = [];\r\n\r\n\t\tlet numTextures = this.effectModel.textures.length;\r\n\t\tthis._numTexturesToLoadLeft = numTextures;\r\n\r\n\t\tfor (let imageIndex = 0; imageIndex < numTextures; ++imageIndex) \r\n\t\t{\r\n\t\t\tlet texturePath = this.effectModel.textures[imageIndex];\r\n\t\t\tlet texture = null;\r\n\t\t\t\r\n\t\t\tif (this.ctx.options.trimmedExtensionsLookupFirst) \r\n\t\t\t{\r\n\t\t\t\tlet trimmedTexturePath = texturePath.replace(/\\.[^/.]+$/, \"\"); // https://stackoverflow.com/a/4250408\r\n\t\t\t\ttexture = PIXI.utils.TextureCache[trimmedTexturePath];\r\n\t\t\t}\r\n\r\n\t\t\tif (!texture)\r\n\t\t\t\ttexture = PIXI.utils.TextureCache[texturePath];\r\n\r\n\t\t\tif (texture)\r\n\t\t\t{\r\n\t\t\t\tif (texture.baseTexture.valid) \r\n\t\t\t\t{\r\n\t\t\t\t\tthis._onTextureLoaded(imageIndex, texture);\r\n\t\t\t\t} else \r\n\t\t\t\t{\r\n\t\t\t\t\ttexture.once('update', function (self, imageIndex, texture) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn function () \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tself._onTextureLoaded(imageIndex, texture);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} (this, imageIndex, texture));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tloader.add(this.ctx.options.texturesBasePath + texturePath, \r\n\t\t\t\t\t{ parentResource: resource }, \r\n\t\t\t\t\tfunction (self, imageIndex) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn function (resource) \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tself._onTextureLoaded(imageIndex, resource.texture);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} (this, imageIndex));\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tready() \r\n\t{\r\n\t\treturn this._numTexturesToLoadLeft === 0;\r\n\t}\r\n\r\n\t_onTextureLoaded(index, texture) \r\n\t{\r\n\t\tthis.textures[index] = texture;\r\n\r\n\t\tthis._numTexturesToLoadLeft--;\r\n\r\n\t\tif (this.ctx.canvasRenderer)\r\n\t\t{\r\n\t\t\tlet image = texture.baseTexture.resource.source;\r\n\t\t\tthis.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\r\n\t\t\t\ttexture.orig.width, texture.orig.height);\r\n\t\t}\r\n\r\n\t\tif (this._numTexturesToLoadLeft === 0) \r\n\t\t{\r\n\t\t\tif (!this.ctx.canvasRenderer)\r\n\t\t\t{\r\n\t\t\t\tthis._initTexturesRemapIfNeeded();\r\n\t\t\t}\r\n\r\n\t\t\tthis.emit('ready', this);\r\n\t\t}\r\n\t}\r\n\r\n\t_initTexturesRemapIfNeeded() \r\n\t{\r\n\t\tlet remapNeeded = false;\r\n\r\n\t\tfor (let texIdx = 0; texIdx < this.textures.length; ++texIdx) \r\n\t\t{\r\n\t\t\tlet texture = this.textures[texIdx];\r\n\r\n\t\t\tif (texture.orig.x != 0 || texture.orig.y != 0\r\n\t\t\t\t|| texture.orig.width != texture.baseTexture.realWidth\r\n\t\t\t\t|| texture.orig.height != texture.baseTexture.realHeight) \r\n\t\t\t{\r\n\t\t\t\tremapNeeded = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.texturesRemap = [];\r\n\r\n\t\tif (!remapNeeded) \r\n\t\t\treturn;\r\n\r\n\t\tfor (let texIdx = 0; texIdx < this.textures.length; ++texIdx) \r\n\t\t{\r\n\t\t\tlet texture = this.textures[texIdx];\r\n\r\n\t\t\tthis.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\r\n\t\t\t\ttexture.orig.x / texture.baseTexture.realWidth,\r\n\t\t\t\t1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\r\n\t\t\t\ttexture.orig.width / texture.baseTexture.realWidth,\r\n\t\t\t\ttexture.orig.height / texture.baseTexture.realHeight\r\n\t\t\t\t);\r\n\t\t}\r\n\t}\r\n}","class PIXINeutrinoLoaderPlugin\r\n{\r\n    static use(resource, next)\r\n    {\r\n        if (resource.extension === 'js' \r\n            && resource.metadata\r\n            && resource.metadata.neutrino\r\n            && resource.data)\r\n        {\r\n            resource.effectModel = new PIXINeutrinoEffectModel(resource.metadata.neutrino, this, resource);\r\n        }\r\n\r\n        next();\r\n    }\r\n}","class PIXINeutrinoRenderBuffers {\r\n\tconstructor() {\r\n\t\tthis.positions = null;\r\n\t\tthis.colors = null;\r\n\t\tthis.texCoords = null;\r\n\t\tthis.maxNumVertices = 0;\r\n\t\tthis.numVertices = 0;\r\n\t\tthis.indices = null;\r\n\t\tthis.globalIndices = null;\r\n\r\n\t\tthis.renderCalls = [];\r\n\t\tthis.maxNumRenderCalls = 0;\r\n\t\tthis.numRenderCalls = 0;\r\n\t}\r\n\r\n\tinitialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\r\n\r\n\t\t// We store only XY components of position.\r\n\t\tthis.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 2));\r\n\t\tthis.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\r\n\t\t// We store only first texture channel and only UV of it.\r\n\t\tthis.texCoords = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 2));\r\n\t\tthis.maxNumVertices = maxNumVertices;\r\n\r\n\t\tthis.globalIndices = new Uint16Array(new ArrayBuffer(2 * indices.length));\r\n\t\tthis.globalIndices.set(indices, 0);\r\n\t\tthis.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\r\n\r\n\t\tthis.maxNumRenderCalls = maxNumRenderCalls;\r\n\t}\r\n\r\n\tpushVertex(vertex) {\r\n\t\tlet startIndex2 = this.numVertices * 2;\r\n\r\n\t\t// Copy only XY components of the position\r\n\t\t{\r\n\t\t\tconst wt = this.worldTransform;\r\n\t\t\tconst x = vertex.position[0];\r\n\t\t\tconst y = vertex.position[1];\r\n\r\n\t\t\tthis.positions[startIndex2] = wt[0] * x + wt[2] * y + wt[4];\r\n\t\t\tthis.positions[startIndex2 + 1] = wt[1] * x + wt[3] * y + wt[5];\r\n\t\t}\r\n\r\n\t\tthis.colors.set(vertex.color, this.numVertices * 4);\r\n\r\n\t\tif (vertex.texCoords.length > 0)\r\n\t\t{\r\n\t\t\t// Copy only first channel of texture coordinates.\r\n\t\t\t// Texture coordinates from Neutrino must be at least 2-dimensional.\r\n\t\t\tthis.texCoords[startIndex2] = vertex.texCoords[0][0];\r\n\t\t\tthis.texCoords[startIndex2 + 1] = 1.0 - vertex.texCoords[0][1];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.texCoords[startIndex2] = 0.0;\r\n\t\t\tthis.texCoords[startIndex2 + 1] = 0.0;\r\n\t\t}\r\n\r\n\t\t++this.numVertices;\r\n\t}\r\n\r\n\tpushRenderCall(rc) {\r\n\t\t// In case we're out of render calls array (which shouldn't be normally),\r\n\t\t// expand the array.\r\n\t\tif (this.numRenderCalls >= this.renderCalls.length)\r\n\t\t\tthis.renderCalls.push(Object.assign({}, rc));\r\n\t\telse\r\n\t\t\tObject.assign(this.renderCalls[this.numRenderCalls], rc);\r\n\r\n\t\tconst thisRenderCall = this.renderCalls[this.numRenderCalls];\r\n\r\n\t\tconst endIndex = thisRenderCall.startIndex + thisRenderCall.numIndices;\r\n\r\n\t\tlet startVertexIndex = this.globalIndices[thisRenderCall.startIndex];\r\n\t\tlet endVertexIndex = startVertexIndex;\r\n\r\n\t\tfor (let i = thisRenderCall.startIndex; i < endIndex; ++i)\r\n\t\t{\r\n\t\t\tconst index = this.globalIndices[i];\r\n\t\t\tif (index < startVertexIndex)\r\n\t\t\t\tstartVertexIndex = index;\r\n\t\t\tif (index > endVertexIndex)\r\n\t\t\t\tendVertexIndex = index;\r\n\t\t}\r\n\r\n\t\tthisRenderCall.startVertexIndex = startVertexIndex;\r\n\t\tthisRenderCall.numVertices = endVertexIndex - startVertexIndex + 1;\r\n\r\n\t\tfor (let i = thisRenderCall.startIndex; i < endIndex; ++i)\r\n\t\t{\r\n\t\t\tthis.indices[i] = this.globalIndices[i] - startVertexIndex;\r\n\t\t}\r\n\r\n\t\t++this.numRenderCalls;\r\n\t}\r\n\r\n\tcleanup() {\r\n\t\tthis.numVertices = 0;\r\n\t\tthis.numRenderCalls = 0;\r\n\t}\r\n}\r\n","class PIXINeutrinoRendererPlugin extends PIXI.AbstractBatchRenderer\r\n{\r\n    constructor(renderer)\r\n    {\r\n        super(renderer);\r\n\r\n        this.shaderGenerator = new PIXI.BatchShaderGenerator(\r\n            PIXI.BatchPluginFactory.defaultVertexSrc, \r\n            PIXI.BatchPluginFactory.defaultFragmentTemplate);\r\n\r\n        this.geometryClass = PIXI.BatchGeometry;\r\n        this.vertexSize = 6;\r\n    }\r\n\r\n    packInterleavedGeometry(element, attributeBuffer, indexBuffer, aIndex, iIndex)\r\n    {\r\n        const {\r\n            uint32View,\r\n            float32View,\r\n        } = attributeBuffer;\r\n\r\n        const packedVertices = aIndex / this.vertexSize;\r\n        const uvs = element.uvs;\r\n        const indicies = element.indices;\r\n        const vertexData = element.vertexData;\r\n        const textureId = element._texture.baseTexture._id;\r\n        const colors = element.colors;\r\n\r\n        //const alpha = Math.min(element.worldAlpha, 1.0);\r\n        /*const argb = (alpha < 1.0\r\n          && element._texture.baseTexture.premultiplyAlpha)\r\n            ? premultiplyTint(element._tintRGB, alpha)\r\n            : element._tintRGB + (alpha * 255 << 24);\r\n            */\r\n\r\n        let lastSrcColor = 0xFFFFFFFF;\r\n        let lastResultColor = 0xFFFFFFFF;\r\n\r\n        let prepareColor = element._texture.baseTexture.premultiplyAlpha ?\r\n            function(srcColor) // In case of premultiplied texture\r\n            {\r\n                if (srcColor == lastSrcColor)\r\n                    return lastResultColor;\r\n\r\n                lastSrcColor = srcColor;\r\n\r\n                const shiftedAlpha = (srcColor & 0xFF000000);\r\n\r\n                if (shiftedAlpha == 0xFF000000)\r\n                {\r\n                    lastResultColor = srcColor;\r\n                }\r\n                else if (shiftedAlpha == 0)\r\n                {\r\n                    lastResultColor = 0;\r\n                }\r\n                else\r\n                {\r\n                    const alpha = (shiftedAlpha >>> 24) / 255.0;\r\n                    lastResultColor = PIXI.utils.premultiplyTint(srcColor & 0xFFFFFF, alpha);\r\n                }\r\n\r\n                return lastResultColor;\r\n            } :\r\n            function(srcColor) // In case of non-premultiplied texture\r\n            { \r\n                return srcColor; \r\n            }\r\n\r\n        // lets not worry about tint! for now..\r\n        for (let i = 0; i < vertexData.length; i += 2)\r\n        {\r\n            float32View[aIndex++] = vertexData[i];\r\n            float32View[aIndex++] = vertexData[i + 1];\r\n            float32View[aIndex++] = uvs[i];\r\n            float32View[aIndex++] = uvs[i + 1];\r\n            uint32View[aIndex++] = prepareColor(colors[i >>> 1]);\r\n            float32View[aIndex++] = textureId;\r\n        }\r\n\r\n        for (let i = 0; i < indicies.length; i++)\r\n        {\r\n            indexBuffer[iIndex++] = packedVertices + indicies[i];\r\n        }\r\n    }\r\n}\r\n"]}